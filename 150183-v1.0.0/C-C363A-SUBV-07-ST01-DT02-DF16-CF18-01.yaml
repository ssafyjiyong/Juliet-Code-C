description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"
code_complexity_features:
  - file_name: /tmp/tmpJ5tiW4_ss_testcase/src-rose/subversion/libsvn_subr/config_file.c
    function_name: skip_bom
    line_number: 0
    feature_group: source_taint
    feature: ENVIRONMENT_VARIABLE
  - file_name: /tmp/tmpJ5tiW4_ss_testcase/src-rose/subversion/libsvn_subr/config_file.c
    function_name: skip_bom
    line_number: 0
    feature_group: data_type
    feature: simple
  - file_name: /tmp/tmpJ5tiW4_ss_testcase/src-rose/subversion/libsvn_subr/config_file.c
    function_name: skip_bom
    line_number: 0
    feature_group: data_flow
    feature: buffer_address_array_index
  - file_name: /tmp/tmpJ5tiW4_ss_testcase/src-rose/subversion/libsvn_subr/config_file.c
    function_name: skip_bom
    line_number: 0
    feature_group: control_flow
    feature: pointer_to_function
io_pair:
  exploits:
    - inputs:
        - stage: pre_process
          stage_enum: 0
          id: source
          source: env_var_input
          ordinal: 1
          name: FORGETFUL_ANGIOKERATOMA
          value: /opt/stonesoup/workspace/testData/fifo1 badfile1
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          source_enum: 2
        - source_enum: 7
          id: background-complex
          name: !<!> "inotifywait -m -e create --format \"%f\" /opt/stonesoup/workspace/testData/ | while read NEW_FILE; do if [[ \"${NEW_FILE}\" == *.pid ]]; then REPLACE_FILE=\"${NEW_FILE%.pid}\"; sleep 1; echo \"Replacing: \" \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && rm -f \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && ln -s /etc/passwd \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && echo \"Replaced.\"; else echo \"Ignoring: \" \"/opt/stonesoup/workspace/testData/${NEW_FILE}\"; fi; done;"
          stage_enum: 0
          ordinal: 2
          stage: pre_process
          source: script_input
        - stage: pre_process
          name: runFifos.py /opt/stonesoup/workspace/testData/fifo1 --nosync
          id: background
          stage_enum: 0
          source: script_input
          ordinal: 3
          source_enum: 7
        - ordinal: 4
          value_encoding: none
          source_enum: 3
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          value: This is yet another file.
          stage: pre_process
          stage_enum: 0
          source: file_content_input
          name: /opt/stonesoup/workspace/testData/badfile1
    - inputs:
        - ordinal: 1
          name: FORGETFUL_ANGIOKERATOMA
          value: /opt/stonesoup/workspace/testData/fifo1 badfile2
          value_encoding: none
          source: env_var_input
          id: source
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
          value_type_enum: 0
          stage: pre_process
          stage_enum: 0
        - source: script_input
          name: !<!> "inotifywait -m -e create --format \"%f\" /opt/stonesoup/workspace/testData/ | while read NEW_FILE; do if [[ \"${NEW_FILE}\" == *.pid ]]; then REPLACE_FILE=\"${NEW_FILE%.pid}\"; sleep 1; echo \"Replacing: \" \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && rm -f \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && ln -s /etc/passwd \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && echo \"Replaced.\"; else echo \"Ignoring: \" \"/opt/stonesoup/workspace/testData/${NEW_FILE}\"; fi; done;"
          stage: pre_process
          id: background-complex
          source_enum: 7
          ordinal: 2
          stage_enum: 0
        - source_enum: 7
          stage_enum: 0
          source: script_input
          stage: pre_process
          id: background
          ordinal: 3
          name: runFifos.py /opt/stonesoup/workspace/testData/fifo1 --nosync
        - value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
          ordinal: 4
          value_encoding: none
          source: file_content_input
          name: /opt/stonesoup/workspace/testData/badfile2
          stage: pre_process
          value: This is also file.
          source_enum: 3
          value_type_enum: 0
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: FORGETFUL_ANGIOKERATOMA
  benigns:
    - inputs:
        - stage: pre_process
          source_enum: 2
          ordinal: 1
          id: source
          name: FORGETFUL_ANGIOKERATOMA
          value: /opt/stonesoup/workspace/testData/file1 goodfile1
          source: env_var_input
          stage_enum: 0
          value_encoding: none
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
        - name: !<!> "inotifywait -m -e create --format \"%f\" /opt/stonesoup/workspace/testData/ | while read NEW_FILE; do if [[ \"${NEW_FILE}\" == *.pid ]]; then REPLACE_FILE=\"${NEW_FILE%.pid}\"; sleep 1; echo \"Replacing: \" \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && rm -f \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && ln -s /etc/passwd \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && echo \"Replaced.\"; else echo \"Ignoring: \" \"/opt/stonesoup/workspace/testData/${NEW_FILE}\"; fi; done;"
          source: script_input
          stage_enum: 0
          source_enum: 7
          stage: pre_process
          id: background-complex
          ordinal: 2
        - source_enum: 3
          stage_enum: 0
          name: /opt/stonesoup/workspace/testData/file1
          ordinal: 3
          source: file_content_input
          stage: pre_process
        - source: file_content_input
          stage_enum: 0
          name: /opt/stonesoup/workspace/testData/goodfile1
          value_type_enum: 0
          value: A non-empty file.
          value_encoding: none
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          ordinal: 4
          source_enum: 3
    - inputs:
        - stage_enum: 0
          id: source
          value: /opt/stonesoup/workspace/testData/file1 goodfile2
          source: env_var_input
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          stage: pre_process
          source_enum: 2
          name: FORGETFUL_ANGIOKERATOMA
          ordinal: 1
        - source: script_input
          name: !<!> "inotifywait -m -e create --format \"%f\" /opt/stonesoup/workspace/testData/ | while read NEW_FILE; do if [[ \"${NEW_FILE}\" == *.pid ]]; then REPLACE_FILE=\"${NEW_FILE%.pid}\"; sleep 1; echo \"Replacing: \" \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && rm -f \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && ln -s /etc/passwd \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && echo \"Replaced.\"; else echo \"Ignoring: \" \"/opt/stonesoup/workspace/testData/${NEW_FILE}\"; fi; done;"
          ordinal: 2
          stage: pre_process
          stage_enum: 0
          id: background-complex
          source_enum: 7
        - stage: pre_process
          source_enum: 3
          source: file_content_input
          stage_enum: 0
          ordinal: 3
          name: /opt/stonesoup/workspace/testData/file1
        - value_type_enum: 0
          stage: pre_process
          value: This is a file.
          source_enum: 3
          value_encoding: none
          name: /opt/stonesoup/workspace/testData/goodfile2
          source: file_content_input
          stage_enum: 0
          ordinal: 4
          value_type: USE_TEXT_DIRECTLY
    - inputs:
        - source: env_var_input
          source_enum: 2
          stage: pre_process
          stage_enum: 0
          id: source
          ordinal: 1
          name: FORGETFUL_ANGIOKERATOMA
          value: /opt/stonesoup/workspace/testData/file1 goodfile3
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
        - source: script_input
          source_enum: 7
          stage_enum: 0
          name: !<!> "inotifywait -m -e create --format \"%f\" /opt/stonesoup/workspace/testData/ | while read NEW_FILE; do if [[ \"${NEW_FILE}\" == *.pid ]]; then REPLACE_FILE=\"${NEW_FILE%.pid}\"; sleep 1; echo \"Replacing: \" \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && rm -f \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && ln -s /etc/passwd \"/opt/stonesoup/workspace/testData/${REPLACE_FILE}\" && echo \"Replaced.\"; else echo \"Ignoring: \" \"/opt/stonesoup/workspace/testData/${NEW_FILE}\"; fi; done;"
          stage: pre_process
          id: background-complex
          ordinal: 2
        - stage_enum: 0
          ordinal: 3
          source: file_content_input
          stage: pre_process
          name: /opt/stonesoup/workspace/testData/file1
          source_enum: 3
        - source: file_content_input
          value: This is another file.
          stage_enum: 0
          value_encoding: none
          source_enum: 3
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          ordinal: 4
          value_type_enum: 0
          name: /opt/stonesoup/workspace/testData/goodfile3
  description: "This weakness expects a string in the form: '<filename> <data>' where filename is a file that will be read to delay execution, and data is a string containing no spaces. The data string is treated as a filename in the testData directory. The weakness checks that the filename does not have any slashes in it and that it is not a symbolic link. However, there is a time of check, time of use vulnerability after the file is checked but before it is opened allowing the file to be replaced with a symbolic link to a file outside of the testData directory. The weakness notifies the test harness that the file should be replaced by a symbolic link by creating a file called testData/*.pid. \n\n"