io_pair:
  exploits:
    - inputs:
        - source: env_var_input
          name: CBEMA_COCKERMEG
          ordinal: 1
          stage: pre_process
          id: source
          stage_enum: 0
          value_encoding: none
          value: 46400
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
          source_enum: 2
    - inputs:
        - stage_enum: 0
          source_enum: 2
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          value: 55000
          name: CBEMA_COCKERMEG
          ordinal: 1
          source: env_var_input
          value_encoding: none
          id: source
          value_type_enum: 0
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: CBEMA_COCKERMEG
  benigns:
    - inputs:
        - name: CBEMA_COCKERMEG
          value: 50
          value_encoding: none
          source: env_var_input
          id: source
          stage_enum: 0
          value_type: USE_TEXT_DIRECTLY
          ordinal: 1
          value_type_enum: 0
          stage: pre_process
          source_enum: 2
    - inputs:
        - value_encoding: none
          id: source
          value: 100
          name: CBEMA_COCKERMEG
          value_type: USE_TEXT_DIRECTLY
          stage: pre_process
          ordinal: 1
          value_type_enum: 0
          source_enum: 2
          source: env_var_input
          stage_enum: 0
    - inputs:
        - value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          value_type_enum: 0
          name: CBEMA_COCKERMEG
          stage_enum: 0
          id: source
          ordinal: 1
          source_enum: 2
          value: 10000
          stage: pre_process
          source: env_var_input
  description: "INT_MAX=2147483647  Any input that is more than the square root of INT_MAX will cause an integer overflow.  Good inputs are any number less than or equal to 46340.  Bad inputs are greater than 46341.  If an overflow occurs, it will result in an infinite loop\n\n"
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"
code_complexity_features:
  - file_name: /tmp/tmpbqn4Mn_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    function_name: get_xlate_handle_node_internal
    line_number: 0
    feature_group: source_taint
    feature: ENVIRONMENT_VARIABLE
  - file_name: /tmp/tmpbqn4Mn_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    function_name: get_xlate_handle_node_internal
    line_number: 0
    feature_group: data_type
    feature: struct
  - file_name: /tmp/tmpbqn4Mn_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    function_name: get_xlate_handle_node_internal
    line_number: 0
    feature_group: data_flow
    feature: index_alias_50
  - feature_group: control_flow
    function_name: get_xlate_handle_node_internal
    feature: infinite_loop
    file_name: /tmp/tmpbqn4Mn_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    line_number: 0