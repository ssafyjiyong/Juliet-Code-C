io_pair:
  benigns:
    - inputs:
        - value: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
          ordinal: 1
          value_encoding: none
          id: source
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
          name: TAVERT_SWADDY
          stage: pre_process
          source_enum: 2
          value_type_enum: 0
          source: env_var_input
        - name: INPUT_STRING
          ordinal: 2
          value_type_enum: 0
          source: env_var_input
          value_encoding: none
          source_enum: 2
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
    - inputs:
        - stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          ordinal: 1
          value: This is probably not going to overflow a buffer of some sort.  Let's run it anyway and see what happens.
          name: TAVERT_SWADDY
          value_type_enum: 0
          source: env_var_input
          stage_enum: 0
          source_enum: 2
          value_encoding: none
          id: source
        - name: INPUT_STRING
          stage: pre_process
          ordinal: 2
          value_type: USE_TEXT_DIRECTLY
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_encoding: none
          source_enum: 2
          value_type_enum: 0
          stage_enum: 0
          source: env_var_input
    - inputs:
        - id: source
          stage: pre_process
          ordinal: 1
          stage_enum: 0
          name: TAVERT_SWADDY
          source_enum: 2
          source: env_var_input
          value_encoding: none
          value: As long as this statement has more than 128 characters, then nothing bad should happen
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
        - source: env_var_input
          value_type: USE_TEXT_DIRECTLY
          value_encoding: none
          stage_enum: 0
          source_enum: 2
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          name: INPUT_STRING
          ordinal: 2
          stage: pre_process
          value_type_enum: 0
  exploits:
    - inputs:
        - stage_enum: 0
          id: source
          name: TAVERT_SWADDY
          source: env_var_input
          source_enum: 2
          stage: pre_process
          ordinal: 1
          value_encoding: base64
          value: QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUGugIE=
          value_type_enum: 0
          value_type: USE_TEXT_DIRECTLY
        - source_enum: 2
          source: env_var_input
          stage_enum: 0
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_type: USE_TEXT_DIRECTLY
          ordinal: 2
          stage: pre_process
          name: INPUT_STRING
          value_type_enum: 0
          value_encoding: none
    - inputs:
        - id: source
          source_enum: 2
          name: TAVERT_SWADDY
          ordinal: 1
          value_encoding: base64
          value: SGVsbKUgV6lybGSI
          source: env_var_input
          stage: pre_process
          value_type: USE_TEXT_DIRECTLY
          stage_enum: 0
          value_type_enum: 0
        - value_type: USE_TEXT_DIRECTLY
          source: env_var_input
          value: AAAABVVCUYEOAISDHGUEHGU:WOJOQIUFGUYGBJdjsafihuegakdlfm9238946665232kmemiucyds78fy2
          value_encoding: none
          name: INPUT_STRING
          value_type_enum: 0
          stage_enum: 0
          source_enum: 2
          ordinal: 2
          stage: pre_process
  description: "Has a stack buffer of size 128 within a struct.  reads in an ascii string from an environmentvariable and increments the corresponding values in the stack buffer.  Then reads in an input and prints out the count of the characters from the stack buff of those in the input.  If input contains extended ascii characters, they will be wrapped around to negative values and the buffer will be under read\n\n"
  base_inputs:
    - source: env_var_input
      source_enum: 2
      stage: pre_process
      stage_enum: 0
      id: source
      ordinal: 1
      name: TAVERT_SWADDY
code_complexity_features:
  - file_name: /tmp/tmpYYtA6A_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    function_name: get_xlate_handle_node_internal
    line_number: 0
    feature_group: source_taint
    feature: ENVIRONMENT_VARIABLE
  - file_name: /tmp/tmpYYtA6A_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    function_name: get_xlate_handle_node_internal
    line_number: 0
    feature_group: data_type
    feature: union
  - file_name: /tmp/tmpYYtA6A_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    function_name: get_xlate_handle_node_internal
    line_number: 0
    feature_group: data_flow
    feature: var_arg_list
  - file_name: /tmp/tmpYYtA6A_ss_testcase/src-rose/subversion/libsvn_subr/utf.c
    line_number: 0
    feature_group: control_flow
    feature: unconditional_jump
    function_name: inconel_hylicism
description: "Creating test case using base program.\nAdded an environment variable read to the function definition.\nCompleted injection.\n"