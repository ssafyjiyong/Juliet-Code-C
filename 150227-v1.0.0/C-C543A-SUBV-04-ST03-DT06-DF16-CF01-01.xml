<?xml version="1.0" encoding="utf-8"?>
<project base_program="C-SUBV" language="C" name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01" targeted_architecture="ANY" targeted_os="LINUX" test_case_type="ALL" xmlns="urn:stonesoup:project">
    <description>Creating test case using base program.
Added a Socket Server to accept communication from untrusted source.
Completed injection.
</description>
    <additional_information>
        <keyvalue key="kill_command">TRUE</keyvalue>
        <keyvalue key="algorithmic_variant_name">UNSPECIFIED</keyvalue>
        <keyvalue key="root_cause">UNSPECIFIED</keyvalue>
    </additional_information>
    <structure install="install" iodata="testData/run" scoredata="testOutput" scripts="scripts" source="src"/>
    <run_command></run_command>
    <weakness generation_method="FAULT_INJECTED">
        <variant cwe="CWE-543" name="CWE-543-A"/>
        <features>
            <taint_source file_name="/subversion/libsvn_subr/stream.c" line_number="0" type="SOCKET">
                <method name="stonesoup_handle_taint"/>
            </taint_source>
            <control_flow file_name="/subversion/libsvn_subr/stream.c" line_number="0" type="CALLBACK">
                <method name="svn_stream_set_close"/>
            </control_flow>
            <data_type file_name="/subversion/libsvn_subr/stream.c" line_number="0" type="TYPEDEF">
                <method name="stonesoup_handle_taint"/>
            </data_type>
            <data_flow file_name="/subversion/libsvn_subr/stream.c" line_number="0" type="BUFFER_ADDRESS_ARRAY_INDEX">
                <method name="stonesoup_handle_taint"/>
            </data_flow>
        </features>
    </weakness>
    <build_commands cppflags="-DSTONESOUP_TRACE=1" libs="-lpthread -l:libmongoose.so.1 -ldl">
        <command>./configure -v --prefix=&quot;$SS_TC_ROOT/$SS_TC_INSTALL&quot; --with-apr=&quot;$SS_TC_DEPS/bin/apr-1-config&quot; --with-apr-util=&quot;$SS_TC_DEPS/bin/apu-1-config&quot; --with-serf --with-sqlite=&quot;$SS_TC_DEPS&quot; --with-sasl --with-libmagic --with-zlib --without-kwallet --without-gnome-keyring --disable-keychain --without-trang --without-doxygen --without-swig --without-jikes --without-ctypesgen --without-junit --without-jdk --without-apxs --with-editor=&quot;/usr/bin/vi&quot; --disable-shared --with-pic=yes</command>
        <command>make VERBOSE=1 CC=&quot;$SS_CC&quot; CCLD=&quot;$SS_LNK&quot;</command>
        <command>make install CC=&quot;$SS_CC&quot; CCLD=&quot;$SS_LNK&quot;</command>
    </build_commands>
    <iopairs>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-01" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>create a repository
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">killall svnserve</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/svnrepos</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-01/svnrepos.tar.gz -C $SS_TC_ROOT/testData/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svnserve -d --foreground -r $SS_TC_ROOT/testData/svnrepos --pid-file=$SS_TC_ROOT/$SS_TC_INSTALL/svnserve.pid</run_command>
            <co_processes scheme="SEQUENCE">
                <process_group scheme="PARALLEL">
                    <process_group scheme="SEQUENCE">
                        <process delay_after="0" delay_before="0">
                            <script background="false" encoding="STRING" type="USE_TEXT">bash $SS_TC_ROOT/scripts/service_mon.sh ss-localhost 3690</script>
                        </process>
                        <process delay_after="0" delay_before="0">
                            <script background="false" encoding="STRING" input_id="CHECKOUT" type="USE_TEXT">$SS_TC_DEPS/bin/svn checkout svn://ss-localhost/stonesoup
                    </script>
                        </process>
                    </process_group>
                    <process_group scheme="SEQUENCE">
                        <process>
                            <script background="false" encoding="STRING" input_id="socket_XSzLZsBnsd" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;0 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 50&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                        </process>
                    </process_group>
                </process_group>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">kill -9 $(cat $SS_TC_ROOT/$SS_TC_INSTALL/svnserve.pid)</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_V8ehXMS7fq" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-01-Default">
                <formula name="GOOD-01-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual input_id_ref="CHECKOUT" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">Checked out revision 0.</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-02" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>commit a file
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">killall svnserve</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/svnrepos</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-02/svnrepos.tar.gz -C $SS_TC_ROOT/testData/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svnserve -d --foreground -r $SS_TC_ROOT/testData/svnrepos --pid-file=$SS_TC_ROOT/$SS_TC_INSTALL/svnserve.pid</run_command>
            <co_processes scheme="SEQUENCE">
                <process_group scheme="PARALLEL">
                    <process_group scheme="SEQUENCE">
                        <process delay_after="0" delay_before="0">
                            <script background="false" encoding="STRING" type="USE_TEXT">bash $SS_TC_ROOT/scripts/service_mon.sh ss-localhost 3690</script>
                        </process>
                        <process delay_after="0" delay_before="0">
                            <script background="false" encoding="STRING" input_id="CHECKOUT" type="USE_TEXT">cd ../good-02 &amp;&amp; $SS_TC_DEPS/bin/svn checkout svn://ss-localhost/stonesoup
                    </script>
                        </process>
                        <process delay_after="0" delay_before="0">
                            <script background="false" encoding="STRING" input_id="ADD" type="USE_TEXT">cd ../good-02 &amp;&amp; cp file.txt stonesoup &amp;&amp; cd stonesoup &amp;&amp; $SS_TC_DEPS/bin/svn add file.txt
                    </script>
                        </process>
                        <process delay_after="0" delay_before="0">
                            <script background="false" encoding="STRING" input_id="COMMIT" type="USE_TEXT">cd ../good-02/stonesoup &amp;&amp; $SS_TC_DEPS/bin/svn commit -m &quot;good-02&quot;
                    </script>
                        </process>
                    </process_group>
                    <process_group scheme="SEQUENCE">
                        <process>
                            <script background="false" encoding="STRING" input_id="socket_XtlI5SzOfv" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;12 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 13&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                        </process>
                    </process_group>
                </process_group>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">kill -9 $(cat $SS_TC_ROOT/$SS_TC_INSTALL/svnserve.pid)</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_i7hlQJmv28" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-02-Default">
                <formula name="GOOD-02-Default">CHECKOUT AND ADD AND COMMIT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="CHECKOUT">
                    <actual input_id_ref="CHECKOUT" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">Checked out revision 0.</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="ADD">
                    <actual input_id_ref="ADD" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">A         file.txt</expected>
                </compare_check>
                <compare_check check_type="CONTAINS" name="COMMIT">
                    <actual input_id_ref="COMMIT" output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-02/output.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-03" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>diff two files using svn diff
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">killall svnserve</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-03/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/file1" type="USE_TEXT">None</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/file2" type="USE_TEXT">None</file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn diff css/main.css css/main2.css</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_RSM3U80s4P" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;1254312 /opt/stonesoup/workspace/testData/file1 /opt/stonesoup/workspace/testData/file2 61&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_Ocd2iYO3NY" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-03-Default">
                <formula name="GOOD-03-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-03/output.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-04" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>use svn mkdir to create a directory and add it to the svn repo
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-04/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn mkdir newdir</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_nDldeDl4Dy" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;0 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 50&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_i7EeRLc1xF" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-04-Default">
                <formula name="GOOD-04-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">A         newdir</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-05" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>use svn to move a file and its position in the repo
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-05/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn move 404.html js/</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_UTMZ16G58Q" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;12 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 13&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_JrqhR6i6MM" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-05-Default">
                <formula name="GOOD-05-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-05/output.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-06" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>run blame on 404.html
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-06/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/file1" type="USE_TEXT">None</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/file2" type="USE_TEXT">None</file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn blame 404.html</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_liir1au8gp" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;1254312 /opt/stonesoup/workspace/testData/file1 /opt/stonesoup/workspace/testData/file2 61&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_Ecx2jX0SOY" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-06-Default">
                <formula name="GOOD-06-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_FILE_CONTENTS">good-06/output.txt</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-07" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>apply a patch
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-07/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn patch good-07.diff</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_M6dRC7xnhQ" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;0 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 50&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_CRjlGXPvWH" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-07-Default">
                <formula name="GOOD-07-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">U         404.html</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-08" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>add a property
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-08/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn propset rating &quot;awesome&quot; 404.html</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_8aXIGT1UK7" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;12 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 13&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_KBOS5vCL6W" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-08-Default">
                <formula name="GOOD-08-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">property 'rating' set on '404.html'</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-09" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>get a property
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-09/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/file1" type="USE_TEXT">None</file>
                </process>
                <process>
                    <file encoding="STRING" path="/opt/stonesoup/workspace/testData/file2" type="USE_TEXT">None</file>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn propget rating 404.html</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_fWXbeMgFAS" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;1254312 /opt/stonesoup/workspace/testData/file1 /opt/stonesoup/workspace/testData/file2 61&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_g17vTFCnrF" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-09-Default">
                <formula name="GOOD-09-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">awesome</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-GOOD-10" reset_scheme="NONE" timeout="300" type="GOOD">
            <description>delete a property
This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>NONE</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-10/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn propdel rating 404.html</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_KkG1t0sgn2" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;0 /opt/stonesoup/workspace/testData/fifo2 /opt/stonesoup/workspace/testData/fifo1 50&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_2DVqU4ujuR" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="GOOD-10-Default">
                <formula name="GOOD-10-Default">STDOUT AND NOT TIMEOUT AND NOT CONTROLLED_EXIT</formula>
            </scoring_formula>
            <output_checks>
                <compare_check check_type="CONTAINS" name="STDOUT">
                    <actual output_type="STANDARD_OUT"></actual>
                    <expected encoding="STRING" type="USE_TEXT">property 'rating' deleted from '404.html'.</expected>
                </compare_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="TIMEOUT" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="CONTROLLED_EXIT" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-BAD-01" reset_scheme="NONE" timeout="300" type="BAD">
            <description>This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>UNEXPECTED_STATE</technical_impact>
            <technical_impact>DOS_BLOCKING</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">killall svnserve</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-03/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn diff css/main.css css/main2.css</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_S64rymMNw5ip2XD7d0OQ" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;15 /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 66&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_yP3kKiWHCMFHyh8BNriz" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="infinite_loop_formula_FFeAp3Ns4r">
                <formula name="infinite_loop_formula_FFeAp3Ns4r">weakness_started_IlmBbXrYc37AjPkTSp3U AND ((NOT PERFORMER AND (timeout_w8c0gntWZG OR (NOT finished_9e1IaH1IdJ AND NOT (controlled_exit_72hrTPhO9j OR continued_execution_V1R9ifQ3n2)))) or (PERFORMER AND NOT ((timeout_w8c0gntWZG OR (NOT finished_9e1IaH1IdJ AND NOT (controlled_exit_72hrTPhO9j OR continued_execution_V1R9ifQ3n2))) OR controlled_exit_72hrTPhO9j)))</formula>
                <formula name="no_weakness_started_formula_E9oKkCivuv">(NOT PERFORMER AND (timeout_w8c0gntWZG OR (NOT finished_9e1IaH1IdJ AND NOT (controlled_exit_72hrTPhO9j OR continued_execution_V1R9ifQ3n2)))) or (PERFORMER AND NOT ((timeout_w8c0gntWZG OR (NOT finished_9e1IaH1IdJ AND NOT (controlled_exit_72hrTPhO9j OR continued_execution_V1R9ifQ3n2))) OR controlled_exit_72hrTPhO9j))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_w8c0gntWZG" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_72hrTPhO9j" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_V1R9ifQ3n2" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <simple_check check_type="SCRIPT" encoding="STRING" name="finished_9e1IaH1IdJ" type="USE_TEXT">if (( $(/bin/grep -E '^Data: [0-9]+$' &quot;../logfile.txt&quot; | wc -l) &gt; 0 )); then true; else false; fi;</simple_check>
                <compare_check check_type="CONTAINS" name="weakness_started_IlmBbXrYc37AjPkTSp3U">
                    <actual encoding="STRING" input_id_ref="lttng_output_yP3kKiWHCMFHyh8BNriz" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
        <iopair name="C-C543A-SUBV-04-ST03-DT06-DF16-CF01-01-BAD-02" reset_scheme="NONE" timeout="300" type="BAD">
            <description>This weakness expects a string in the form: '&lt;qsize&gt; &lt;file1&gt; &lt;file2&gt; &lt;data&gt;' where qsize is the size of the quick sort (used to delay execution in certain benign cases), file1 and file2 are files to be read (also to delay execution), and data is an integer to count up to to exercise the blocking queue that contains the weakness. This weakness uses a singleton pattern to initiate a blocking queue that has the possibility of returning multiple instances of the queue if a thread attempts to initialize the queue while another is thread inside the initializer, but has not yet allocated memory for the queue.

</description>
            <technical_impact>UNEXPECTED_STATE</technical_impact>
            <technical_impact>DOS_BLOCKING</technical_impact>
            <pre_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">printf '' | tee nginx_conf_env.txt</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/testData/run &amp;&amp; mkdir $SS_TC_ROOT/testData/run</script>
                </process>
                <process delay_after="0" delay_before="0">
                    <script background="false" encoding="STRING" type="USE_TEXT">tar -zxvf $SS_TC_ROOT/testData/good-04/allura.tar.gz --strip-components=1 -C $SS_TC_ROOT/testData/run/</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">nohup runFifos.py /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.out 2&gt;&amp;1 &amp; echo $! &gt; /opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid &amp;&amp; echo &quot;Script spawned&quot;</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir $SS_TC_ROOT/logs/execute/lttng</script>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="LTTNG_HOME" type="USE_TEXT">$SS_TC_ROOT/logs/execute/lttng</environment_variable>
                </process>
                <process>
                    <environment_variable encoding="STRING" key="SS_RUN_COMMAND_LD_PRELOAD" type="USE_TEXT">$SS_TC_DEPS/lib64/liblttng-stonesoup-c.so:$SS_TC_DEPS/lib64/liblttng-ust-fork.so</environment_variable>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">mkdir -p $SS_TC_DEPS/var/run/lttng</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">$SS_TC_DEPS/bin/lttng create &amp;&amp; $SS_TC_DEPS/bin/lttng enable-event -u -a &amp;&amp; $SS_TC_DEPS/bin/lttng start</script>
                </process>
                <process>
                    <script background="false" encoding="STRING" type="USE_TEXT">rm -rf $SS_TC_ROOT/lockDir</script>
                </process>
            </pre_processes>
            <run_command encoding="STRING" preprend_runcommand="true" type="USE_TEXT">$SS_TC_ROOT/$SS_TC_INSTALL/bin/svn mkdir newdir</run_command>
            <co_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="socket_yjXaMKGLwIvUaAyMng6f" type="USE_TEXT">/opt/stonesoup/workspace/scripts/service_mon.sh ss-localhost 8887 &amp;&amp; curl -v --data-urlencode data=&quot;74 /opt/stonesoup/workspace/testData/fifo1 /opt/stonesoup/workspace/testData/fifo2 51&quot; --header &quot;If-Match: weak_taint_source_value&quot; --request POST --no-buffer --output /opt/stonesoup/workspace/testData/logfile.txt --silent --show-error http://ss-localhost:8887</script>
                </process>
            </co_processes>
            <post_processes scheme="SEQUENCE">
                <process>
                    <script background="false" encoding="STRING" input_id="lttng_output_XHr3RDIx3exwcBRdeIWJ" type="USE_TEXT">$SS_TC_DEPS/bin/lttng stop &amp;&amp; $SS_TC_DEPS/bin/lttng view &amp;&amp; $SS_TC_DEPS/bin/lttng destroy</script>
                </process>
                <process delay_after="2">
                    <script background="false" encoding="STRING" type="USE_TEXT">if [[ -f &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot; ]]; then killtree.sh -s 9 -p $(cat &quot;/opt/stonesoup/workspace/inputDaemons/preprocess_daemon_script_01.pid&quot;) &amp;&amp; echo &quot;Killed script.&quot;; else echo &quot;Failed: Script PID file does not exist.&quot;; fi</script>
                </process>
            </post_processes>
            <scoring_formula default="infinite_loop_formula_HUufExAtqR">
                <formula name="infinite_loop_formula_HUufExAtqR">weakness_started_7bOXkHe8wXXjoM63TACU AND ((NOT PERFORMER AND (timeout_PTiTRVVSmA OR (NOT finished_Nqiaipn7My AND NOT (controlled_exit_c53PiKSZle OR continued_execution_ERCCNWX4u5)))) or (PERFORMER AND NOT ((timeout_PTiTRVVSmA OR (NOT finished_Nqiaipn7My AND NOT (controlled_exit_c53PiKSZle OR continued_execution_ERCCNWX4u5))) OR controlled_exit_c53PiKSZle)))</formula>
                <formula name="no_weakness_started_formula_bBwtQfFl0Y">(NOT PERFORMER AND (timeout_PTiTRVVSmA OR (NOT finished_Nqiaipn7My AND NOT (controlled_exit_c53PiKSZle OR continued_execution_ERCCNWX4u5)))) or (PERFORMER AND NOT ((timeout_PTiTRVVSmA OR (NOT finished_Nqiaipn7My AND NOT (controlled_exit_c53PiKSZle OR continued_execution_ERCCNWX4u5))) OR controlled_exit_c53PiKSZle))</formula>
            </scoring_formula>
            <output_checks>
                <simple_check check_type="SPECIAL" encoding="STRING" name="timeout_PTiTRVVSmA" type="USE_TEXT">DOES_NOT_RETURN</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="controlled_exit_c53PiKSZle" type="USE_TEXT">CONTROLLED_EXIT</simple_check>
                <simple_check check_type="SPECIAL" encoding="STRING" name="continued_execution_ERCCNWX4u5" type="USE_TEXT">CONTINUED_EXECUTION</simple_check>
                <simple_check check_type="SCRIPT" encoding="STRING" name="finished_Nqiaipn7My" type="USE_TEXT">if (( $(/bin/grep -E '^Data: [0-9]+$' &quot;../logfile.txt&quot; | wc -l) &gt; 0 )); then true; else false; fi;</simple_check>
                <compare_check check_type="CONTAINS" name="weakness_started_7bOXkHe8wXXjoM63TACU">
                    <actual encoding="STRING" input_id_ref="lttng_output_XHr3RDIx3exwcBRdeIWJ" output_type="STANDARD_OUT">None</actual>
                    <expected encoding="STRING" type="USE_TEXT">stonesoup_trace:weakness_start</expected>
                </compare_check>
            </output_checks>
        </iopair>
    </iopairs>
</project>
