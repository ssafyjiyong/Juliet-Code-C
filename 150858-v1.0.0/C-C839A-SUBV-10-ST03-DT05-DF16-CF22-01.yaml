code_complexity_features:
  - feature_group: source_taint
    feature: SOCKET
    file_name: /tmp/tmphe0iJi_ss_testcase/src-rose/subversion/libsvn_subr/types.c
    function_name: stonesoup_handle_taint
    line_number: 0
  - file_name: /tmp/tmphe0iJi_ss_testcase/src-rose/subversion/libsvn_subr/types.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_type
    feature: struct
  - file_name: /tmp/tmphe0iJi_ss_testcase/src-rose/subversion/libsvn_subr/types.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: data_flow
    feature: buffer_address_array_index
  - file_name: /tmp/tmphe0iJi_ss_testcase/src-rose/subversion/libsvn_subr/types.c
    function_name: stonesoup_handle_taint
    line_number: 0
    feature_group: control_flow
    feature: macros
description: "Creating test case using base program.\nAdded a Socket Server to accept communication from untrusted source.\nCompleted injection.\n"
io_pair:
  benigns:
    - inputs:
        - value_type_enum: 0
          address: ss-localhost
          ordinal: 1
          port: 8887
          value_encoding: none
          value_type: USE_TEXT_DIRECTLY
          source: socket_input
          source_enum: 5
          value: 10
          stage_enum: 1
          stage: co_process
          id: source
    - inputs:
        - value_type_enum: 0
          source: socket_input
          stage: co_process
          source_enum: 5
          id: source
          stage_enum: 1
          ordinal: 1
          port: 8887
          address: ss-localhost
          value_type: USE_TEXT_DIRECTLY
          value: 1000
          value_encoding: none
    - inputs:
        - stage_enum: 1
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          value_encoding: none
          stage: co_process
          id: source
          source: socket_input
          value: 20
          port: 8887
          ordinal: 1
          address: ss-localhost
          source_enum: 5
  exploits:
    - inputs:
        - source: socket_input
          source_enum: 5
          value: -8000000
          port: 8887
          id: source
          stage: co_process
          stage_enum: 1
          ordinal: 1
          address: ss-localhost
          value_type: USE_TEXT_DIRECTLY
          value_type_enum: 0
          value_encoding: none
    - inputs:
        - value_type_enum: 0
          stage_enum: 1
          address: ss-localhost
          stage: co_process
          source: socket_input
          id: source
          value_type: USE_TEXT_DIRECTLY
          source_enum: 5
          value: -16777215
          ordinal: 1
          value_encoding: none
          port: 8887
  base_inputs:
    - source: socket_input
      source_enum: 5
      stage: co_process
      stage_enum: 1
      id: source
      ordinal: 1
      address: ss-localhost
      port: 8887
  description: "Read an integer from the input.  If integer >= 4096, do nothing.Else malloc a buffer of 4096 bytes.  Memset the buffer to 'a'. Memset bytes of buffer from input_integer to 4095 to 'b'. Print the buffer.  This all works correctly if the input_integer is 0 or greater.  If input_integer is negative, we will try to memset a random place in memory.  If the input_integer is sufficiently large, this is unaddressable, and we get a segfault.\n\n"